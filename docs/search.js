window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "cowsay", "modulename": "cowsay", "type": "module", "doc": "<p><a href=\"https://github.com/VaasuDevanS/cowsay-python/actions/workflows/cowsay.yaml\"><img src=\"https://github.com/VaasuDevanS/cowsay-python/actions/workflows/cowsay.yaml/badge.svg?branch=main\" alt=\"cowsay\" /></a>\n<a href=\"https://badge.fury.io/py/Cowsay\"><img src=\"https://badge.fury.io/py/Cowsay.svg\" alt=\"PyPI version\" /></a>\n<a href=\"https://github.com/VaasuDevanS/cowsay-python\"><img src=\"https://img.shields.io/badge/github-cowsay--python-blue\" alt=\"Github\" /></a>\n<a href=\"https://vaasudevans.github.io/cowsay-python\"><img src=\"https://img.shields.io/badge/documentation-cowsay--python-informational\" alt=\"Documentation\" /></a>\n<br>\n<img src=\"https://pepy.tech/badge/cowsay\" alt=\"\" />\n<img src=\"https://pepy.tech/badge/cowsay/month\" alt=\"\" />\n<img src=\"https://pepy.tech/badge/cowsay/week\" alt=\"\" /></p>\n\n<h3 id=\"latest-version-50-release-date-jun-21-2022\"><code>Latest version: 5.0 (Release Date: Jun 21, 2022)</code></h3>\n\n<blockquote>\n  <p>A python API / console script for the famous linux <code>cowsay</code> <br>\n  All contributions / pull requests are welcome; Check <a href=\"https://github.com/VaasuDevanS/cowsay-python/graphs/contributors\">here</a> to see the contributors <br>\n  Take a look at <a href=\"https://github.com/VaasuDevanS/cowsay-python/blob/main/CHANGELOG.md\">CHANGELOG.md</a> for the changes</p>\n</blockquote>\n\n<h1 id=\"brief-history\">Brief History</h1>\n\n<blockquote>\n  <p>cowsay for GNU/Linux was initially written in perl by Tony Monroe (tony@nog.net), with suggestions from Shannon Appel (appel@CSUA.Berkeley.EDU) and contributions from Anthony Polito (aspolito@CSUA.Berkeley.EDU).</p>\n</blockquote>\n\n<h1 id=\"installation\">Installation</h1>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"go\">pip install cowsay</span>\n</code></pre></div>\n\n<h1 id=\"documentation\">Documentation</h1>\n\n<p>Documentation was generated using <a href=\"https://github.com/mitmproxy/pdoc\">pdoc</a> using the following command</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"go\">pdoc -d google cowsay -o docs</span>\n</code></pre></div>\n\n<h1 id=\"basic-usage\">Basic Usage</h1>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">cowsay</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cowsay</span><span class=\"o\">.</span><span class=\"n\">cow</span><span class=\"p\">(</span><span class=\"s1\">&#39;Hello World&#39;</span><span class=\"p\">)</span>\n <span class=\"n\">___________</span>\n<span class=\"o\">|</span> <span class=\"n\">Hello</span> <span class=\"n\">World</span> <span class=\"o\">|</span>\n  <span class=\"o\">===========</span>\n           \\\n            \\\n              <span class=\"o\">^</span><span class=\"n\">__</span><span class=\"o\">^</span>\n              <span class=\"p\">(</span><span class=\"n\">oo</span><span class=\"p\">)</span>\\<span class=\"n\">_______</span>\n              <span class=\"p\">(</span><span class=\"n\">__</span><span class=\"p\">)</span>\\       <span class=\"p\">)</span>\\<span class=\"o\">/</span>\\\n                  <span class=\"o\">||----</span><span class=\"n\">w</span> <span class=\"o\">|</span>\n                  <span class=\"o\">||</span>     <span class=\"o\">||</span>\n\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">cowsay</span><span class=\"o\">.</span><span class=\"n\">get_output_string</span><span class=\"p\">(</span><span class=\"s1\">&#39;cow&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Hello World&#39;</span><span class=\"p\">))</span>\n  <span class=\"n\">___________</span>\n<span class=\"o\">|</span> <span class=\"n\">Hello</span> <span class=\"n\">World</span> <span class=\"o\">|</span>\n  <span class=\"o\">===========</span>\n           \\\n            \\\n              <span class=\"o\">^</span><span class=\"n\">__</span><span class=\"o\">^</span>\n              <span class=\"p\">(</span><span class=\"n\">oo</span><span class=\"p\">)</span>\\<span class=\"n\">_______</span>\n              <span class=\"p\">(</span><span class=\"n\">__</span><span class=\"p\">)</span>\\       <span class=\"p\">)</span>\\<span class=\"o\">/</span>\\\n                  <span class=\"o\">||----</span><span class=\"n\">w</span> <span class=\"o\">|</span>\n                  <span class=\"o\">||</span>     <span class=\"o\">||</span>\n\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cowsay</span><span class=\"o\">.</span><span class=\"n\">cow</span><span class=\"p\">(</span><span class=\"s1\">&#39;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris blandit rhoncus nibh. Mauris mi mauris, molestie vel metus sit amet, aliquam vulputate nibh.&#39;</span><span class=\"p\">)</span>\n  <span class=\"n\">_________________________________________________</span>\n <span class=\"o\">/</span>                                                 \\\n<span class=\"o\">|</span> <span class=\"n\">Lorem</span> <span class=\"n\">ipsum</span> <span class=\"n\">dolor</span> <span class=\"n\">sit</span> <span class=\"n\">amet</span><span class=\"p\">,</span> <span class=\"n\">consectetur</span> <span class=\"n\">adipiscin</span> <span class=\"o\">|</span>\n<span class=\"o\">|</span> <span class=\"n\">g</span> <span class=\"n\">elit</span><span class=\"o\">.</span> <span class=\"n\">Mauris</span> <span class=\"n\">blandit</span> <span class=\"n\">rhoncus</span> <span class=\"n\">nibh</span><span class=\"o\">.</span> <span class=\"n\">Mauris</span> <span class=\"n\">mi</span> <span class=\"n\">ma</span> <span class=\"o\">|</span>\n<span class=\"o\">|</span> <span class=\"n\">uris</span><span class=\"p\">,</span> <span class=\"n\">molestie</span> <span class=\"n\">vel</span> <span class=\"n\">metus</span> <span class=\"n\">sit</span> <span class=\"n\">amet</span><span class=\"p\">,</span> <span class=\"n\">aliquam</span> <span class=\"n\">vulput</span> <span class=\"o\">|</span>\n<span class=\"o\">|</span> <span class=\"n\">ate</span> <span class=\"n\">nibh</span><span class=\"o\">.</span>                                         <span class=\"o\">|</span>\n \\                                                 <span class=\"o\">/</span>\n  <span class=\"o\">=================================================</span>\n                                                 \\\n                                                  \\\n                                                    <span class=\"o\">^</span><span class=\"n\">__</span><span class=\"o\">^</span>\n                                                    <span class=\"p\">(</span><span class=\"n\">oo</span><span class=\"p\">)</span>\\<span class=\"n\">_______</span>\n                                                    <span class=\"p\">(</span><span class=\"n\">__</span><span class=\"p\">)</span>\\       <span class=\"p\">)</span>\\<span class=\"o\">/</span>\\\n                                                        <span class=\"o\">||----</span><span class=\"n\">w</span> <span class=\"o\">|</span>\n                                                        <span class=\"o\">||</span>     <span class=\"o\">||</span>\n</code></pre></div>\n\n<h1 id=\"more-characters\">More characters</h1>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"go\">&gt;&gt;&gt; cowsay.char_names</span>\n<span class=\"go\">[&#39;beavis&#39;, &#39;cheese&#39;, &#39;cow&#39;, &#39;daemon&#39;, &#39;dragon&#39;, &#39;fox&#39;, &#39;ghostbusters&#39;, &#39;kitty&#39;, &#39;meow&#39;, &#39;miki&#39;, &#39;milk&#39;, &#39;pig&#39;, &#39;stegosaurus&#39;, &#39;stimpy&#39;, &#39;trex&#39;, &#39;turkey&#39;, &#39;turtle&#39;, &#39;tux&#39;]</span>\n\n\n<span class=\"go\">&gt;&gt;&gt; cowsay.chars</span>\n<span class=\"go\">{&#39;beavis&#39;: &lt;function func at 0x00000220913B4670&gt;, &#39;cheese&#39;: &lt;function func at 0x00000220913B4F70&gt;, &#39;daemon&#39;: &lt;function func at 0x00000220913D40D0&gt;, </span>\n<span class=\"go\"> &#39;cow&#39;: &lt;function func at 0x00000220913D41F0&gt;, &#39;dragon&#39;: &lt;function func at 0x00000220913D4280&gt;, &#39;fox&#39;: &lt;function func at 0x00000220913D4310&gt;, </span>\n<span class=\"go\"> &#39;ghostbusters&#39;: &lt;function func at 0x00000220913D43A0&gt;, &#39;kitty&#39;: &lt;function func at 0x00000220913D4430&gt;, &#39;meow&#39;: &lt;function func at 0x00000220913D44C0&gt;, </span>\n<span class=\"go\"> &#39;miki&#39;: &lt;function func at 0x00000220913D4550&gt;, &#39;milk&#39;: &lt;function func at 0x00000220913D45E0&gt;, &#39;pig&#39;: &lt;function func at 0x00000220913D4670&gt;, </span>\n<span class=\"go\"> &#39;stegosaurus&#39;: &lt;function func at 0x00000220913D4700&gt;, &#39;stimpy&#39;: &lt;function func at 0x00000220913D4790&gt;, &#39;trex&#39;: &lt;function func at 0x00000220913D4820&gt;, </span>\n<span class=\"go\"> &#39;turkey&#39;: &lt;function func at 0x00000220913D48B0&gt;, &#39;turtle&#39;: &lt;function func at 0x00000220913D4940&gt;, &#39;tux&#39;: &lt;function func at 0x00000220913D49D0&gt;}</span>\n\n\n<span class=\"go\">&gt;&gt;&gt; len(cowsay.chars)</span>\n<span class=\"go\">18</span>\n\n\n<span class=\"go\">&gt;&gt;&gt; for char, char_func in cowsay.chars.items():</span>\n<span class=\"go\">...     char_func(f&#39;Hi! I am {char}&#39;)</span>\n<span class=\"go\">  _______________</span>\n<span class=\"go\">| Hi! I am beavis |</span>\n<span class=\"go\">  ===============</span>\n<span class=\"go\">                    \\</span>\n<span class=\"go\">                     \\</span>\n<span class=\"go\">                      \\</span>\n<span class=\"go\">                            _------~~-,</span>\n<span class=\"go\">                         ,&#39;            ,</span>\n<span class=\"go\">                         /               \\\\</span>\n<span class=\"go\">                        /                :</span>\n<span class=\"go\">                       |                  &#39;</span>\n<span class=\"go\">                       |                  |</span>\n<span class=\"go\">                       |                  |</span>\n<span class=\"go\">                        |   _--           |</span>\n<span class=\"go\">                        _| =-.     .-.   ||</span>\n<span class=\"go\">                        o|/o/       _.   |</span>\n<span class=\"go\">                        /  ~          \\\\ |</span>\n<span class=\"go\">                      (____\\@)  ___~    |</span>\n<span class=\"go\">                         |_===~~~.`    |</span>\n<span class=\"go\">                      _______.--~     |</span>\n<span class=\"go\">                      \\\\________       |</span>\n<span class=\"go\">                               \\\\      |</span>\n<span class=\"go\">                             __/-___-- -__</span>\n<span class=\"go\">                            /            _ \\\\</span>\n<span class=\"go\">  _______________</span>\n<span class=\"go\">| Hi! I am cheese |</span>\n<span class=\"go\">  ===============</span>\n<span class=\"go\">               \\</span>\n<span class=\"go\">                \\</span>\n<span class=\"go\">                 \\</span>\n<span class=\"go\">                  \\</span>\n<span class=\"go\">                    /     \\_/         |</span>\n<span class=\"go\">                   |                 ||</span>\n<span class=\"go\">                   |                 ||</span>\n<span class=\"go\">                  |    ###\\  /###   | |</span>\n<span class=\"go\">                  |     0  \\/  0    | |</span>\n<span class=\"go\">                 /|                 | |</span>\n<span class=\"go\">                / |        &lt;        |\\ \\</span>\n<span class=\"go\">               | /|                 | | |</span>\n<span class=\"go\">               | |     \\_______/   |  | |</span>\n<span class=\"go\">               | |                 | / /</span>\n<span class=\"go\">               /||                 /|||</span>\n<span class=\"go\">                  ----------------|</span>\n<span class=\"go\">                       | |    | |</span>\n<span class=\"go\">                       ***    ***</span>\n<span class=\"go\">                      /___\\  /___\\</span>\n<span class=\"go\">  _______________</span>\n<span class=\"go\">| Hi! I am daemon |</span>\n<span class=\"go\">  ===============</span>\n<span class=\"go\">                       \\</span>\n<span class=\"go\">                        \\</span>\n<span class=\"go\">                         \\</span>\n<span class=\"go\">                          \\</span>\n<span class=\"go\">                           /- _  `-/  &#39;</span>\n<span class=\"go\">                          (/\\/ \\ \\   /\\</span>\n<span class=\"go\">                          / /   | `    \\</span>\n<span class=\"go\">                          O O   ) /    |</span>\n<span class=\"go\">                          `-^--&#39;`&lt;     &#39;</span>\n<span class=\"go\">                         (_.)  _  )   /</span>\n<span class=\"go\">                          `.___/`    /</span>\n<span class=\"go\">                            `-----&#39; /</span>\n<span class=\"go\">               &lt;----.     __ / __   \\</span>\n<span class=\"go\">               &lt;----|====O)))==) \\) /====</span>\n<span class=\"go\">               &lt;----&#39;    `--&#39; `.__,&#39; \\</span>\n<span class=\"go\">                            |        |</span>\n<span class=\"go\">                             \\       /</span>\n<span class=\"go\">                       ______( (_  / \\______</span>\n<span class=\"go\">                     ,&#39;  ,-----&#39;   |        \\</span>\n<span class=\"go\">                     `--{__________)        \\/</span>\n<span class=\"go\">  ____________</span>\n<span class=\"go\">| Hi! I am cow |</span>\n<span class=\"go\">  ============</span>\n<span class=\"go\">            \\</span>\n<span class=\"go\">             \\</span>\n<span class=\"go\">               ^__^</span>\n<span class=\"go\">               (oo)\\_______</span>\n<span class=\"go\">               (__)\\       )\\/\\</span>\n<span class=\"go\">                   ||----w |</span>\n<span class=\"go\">                   ||     ||</span>\n<span class=\"go\">  _______________</span>\n<span class=\"go\">| Hi! I am dragon |</span>\n<span class=\"go\">  ===============</span>\n<span class=\"go\">                 \\</span>\n<span class=\"go\">                  \\</span>\n<span class=\"go\">                   \\</span>\n<span class=\"go\">                    \\</span>\n<span class=\"go\">                                          / \\\\  //\\\\</span>\n<span class=\"go\">                           |\\\\___/|      /   \\\\//  \\\\\\\\</span>\n<span class=\"go\">                           /0  0  \\\\__  /    //  | \\\\ \\\\</span>\n<span class=\"go\">                          /     /  \\\\/_/    //   |  \\\\  \\\\</span>\n<span class=\"go\">                          \\@_^_\\@&#39;/   \\\\/_   //    |   \\\\   \\\\</span>\n<span class=\"go\">                          //_^_/     \\\\/_ //     |    \\\\    \\\\</span>\n<span class=\"go\">                       ( //) |        \\\\///      |     \\\\     \\\\</span>\n<span class=\"go\">                     ( / /) _|_ /   )  //       |      \\\\     _\\\\</span>\n<span class=\"go\">                   ( // /) &#39;/,_ _ _/  ( ; -.    |    _ _\\\\.-~        .-~~~^-.</span>\n<span class=\"go\">                 (( / / )) ,-{        _      `-.|.-~-.           .~         `.</span>\n<span class=\"go\">                (( // / ))  &#39;/\\\\      /                 ~-. _ .-~      .-~^-.  \\\\</span>\n<span class=\"go\">                (( /// ))      `.   {            }                   /      \\\\  \\\\</span>\n<span class=\"go\">                 (( / ))     .----~-.\\\\        \\\\-&#39;                 .~         \\\\  `. \\\\^-.</span>\n<span class=\"go\">                            ///.----..&gt;        \\\\             _ -~             `.  ^-`  ^-_</span>\n<span class=\"go\">                              ///-._ _ _ _ _ _ _}^ - - - - ~                     ~-- ,.-~</span>\n<span class=\"go\">                                                                                 /.-~</span>\n<span class=\"go\">  ____________</span>\n<span class=\"go\">| Hi! I am fox |</span>\n<span class=\"go\">  ============</span>\n<span class=\"go\">             \\</span>\n<span class=\"go\">              \\</span>\n<span class=\"go\">               \\</span>\n<span class=\"go\">                |\\_/|,,_____,~~`</span>\n<span class=\"go\">                (.&quot;.)~~     )`~}}</span>\n<span class=\"go\">                 \\o/\\ /---~\\\\ ~}}</span>\n<span class=\"go\">                   _//    _// ~}</span>\n<span class=\"go\">  _____________________</span>\n<span class=\"go\">| Hi! I am ghostbusters |</span>\n<span class=\"go\">  =====================</span>\n<span class=\"go\">                             \\</span>\n<span class=\"go\">                              \\</span>\n<span class=\"go\">                               \\</span>\n<span class=\"go\">                                \\</span>\n<span class=\"go\">                                            __---__</span>\n<span class=\"go\">                                         _-       /--______</span>\n<span class=\"go\">                                    __--( /     \\ )XXXXXXXXXXX\\v.</span>\n<span class=\"go\">                                  .-XXX(   O   O  )XXXXXXXXXXXXXXX-</span>\n<span class=\"go\">                                 /XXX(       U     )        XXXXXXX\\</span>\n<span class=\"go\">                               /XXXXX(              )--_  XXXXXXXXXXX\\</span>\n<span class=\"go\">                              /XXXXX/ (      O     )   XXXXXX   \\XXXXX\\</span>\n<span class=\"go\">                              XXXXX/   /            XXXXXX   \\__ \\XXXXX</span>\n<span class=\"go\">                              XXXXXX__/          XXXXXX         \\__----&gt;</span>\n<span class=\"go\">                      ---___  XXX__/          XXXXXX      \\__         /</span>\n<span class=\"go\">                        \\-  --__/   ___/\\  XXXXXX            /  ___--/=</span>\n<span class=\"go\">                         \\-\\    ___/    XXXXXX              &#39;--- XXXXXX</span>\n<span class=\"go\">                            \\-\\/XXX\\ XXXXXX                      /XXXXX</span>\n<span class=\"go\">                              \\XXXXXXXXX   \\                    /XXXXX/</span>\n<span class=\"go\">                               \\XXXXXX      &gt;                 _/XXXXX/</span>\n<span class=\"go\">                                 \\XXXXX--__/              __-- XXXX/</span>\n<span class=\"go\">                                  -XXXXXXXX---------------  XXXXXX-</span>\n<span class=\"go\">                                     \\XXXXXXXXXXXXXXXXXXXXXXXXXX/</span>\n<span class=\"go\">                                       &quot;&quot;VXXXXXXXXXXXXXXXXXXV&quot;&quot;</span>\n<span class=\"go\">  ______________</span>\n<span class=\"go\">| Hi! I am kitty |</span>\n<span class=\"go\">  ==============</span>\n<span class=\"go\">                 \\</span>\n<span class=\"go\">                  \\</span>\n<span class=\"go\">                   \\</span>\n<span class=\"go\">                    \\</span>\n<span class=\"go\">                     (&quot;`-&#39;  &#39;-/&quot;) .___..--&#39; &#39; &quot;`-._</span>\n<span class=\"go\">                      ` *_ *  )    `-.   (      ) .`-.__. `)</span>\n<span class=\"go\">                       (_Y_.) &#39; ._   )   `._` ;  `` -. .-&#39;</span>\n<span class=\"go\">                    _.. `--&#39;_..-_/   /--&#39; _ .&#39; ,4</span>\n<span class=\"go\">                   ( i l ),-&#39;&#39;  ( l i),&#39;  ( ( ! .-&#39;</span>\n<span class=\"go\">  _____________</span>\n<span class=\"go\">| Hi! I am meow |</span>\n<span class=\"go\">  =============</span>\n<span class=\"go\">             \\</span>\n<span class=\"go\">              \\</span>\n<span class=\"go\">               \\</span>\n<span class=\"go\">                \\</span>\n<span class=\"go\">                               _ ___.--&#39;&#39;&#39;`--&#39;&#39;//-,-_--_.</span>\n<span class=\"go\">                   \\\\`&quot;&#39; ` || \\\\\\\\ \\\\ \\\\\\\\/ / // / ,-\\\\\\\\`,_</span>\n<span class=\"go\">                  /&#39;`  \\\\ \\\\ || Y  | \\\\|/ / // / - |__ `-,</span>\n<span class=\"go\">                 /\\@&quot;\\\\  ` \\\\ `\\\\ |  | ||/ // | \\\\/  \\\\  `-._`-,_.,</span>\n<span class=\"go\">                /  _.-. `.-\\\\,___/\\\\ _/|_/_\\\\_\\\\/|_/ |     `-._._)</span>\n<span class=\"go\">                `-&#39;``/  /  |  // \\\\__/\\\\__  /  \\\\__/ \\\\</span>\n<span class=\"go\">                     `-&#39;  /-\\\\/  | -|   \\\\__ \\\\   |-&#39; |</span>\n<span class=\"go\">                       __/\\\\ / _/ \\\\/ __,-&#39;   ) ,&#39; _|&#39;</span>\n<span class=\"go\">                      (((__/(((_.&#39; ((___..-&#39;((__,&#39;</span>\n<span class=\"go\">  _____________</span>\n<span class=\"go\">| Hi! I am miki |</span>\n<span class=\"go\">  =============</span>\n<span class=\"go\">             \\                                                      </span>\n<span class=\"go\">              \\                  &amp;************************&amp;</span>\n<span class=\"go\">               \\             &amp;******************************&amp;</span>\n<span class=\"go\">                \\          &amp;**********************************&amp;</span>\n<span class=\"go\">                         &amp;**************************************&amp;</span>\n<span class=\"go\">                       &amp;*****************************************&amp;</span>\n<span class=\"go\">                      &amp;*******************************************&amp; </span>\n<span class=\"go\">                     &amp;*********************************************&amp;</span>\n<span class=\"go\">                    &amp;***********************************************&amp;</span>\n<span class=\"go\">                   &amp;************************************************&amp;</span>\n<span class=\"go\">                   &amp;***#########********#########*******************&amp;</span>\n<span class=\"go\">                   &amp;*##       ##########          ##################&amp;</span>\n<span class=\"go\">                   &amp;*##   O   ##@**####   O       ##***************&amp;</span>\n<span class=\"go\">                   &amp;***#########@*******#########*****************&amp;</span>\n<span class=\"go\">                   &amp;***********@*********************************&amp;</span>\n<span class=\"go\">                   &amp;**********@*********************************&amp;</span>\n<span class=\"go\">                   &amp;*********@*********************************&amp;</span>\n<span class=\"go\">                   &amp;********@@*********************************&amp;</span>\n<span class=\"go\">                    &amp;*******@@@@@@****************************&amp;   </span>\n<span class=\"go\">                     &amp;**************************************&amp;</span>\n<span class=\"go\">                       &amp;**************************************&amp;</span>\n<span class=\"go\">                        &amp;******@@@@@@@@@@@@*********************&amp;</span>\n<span class=\"go\">                          &amp;*************************************&amp;   </span>\n<span class=\"go\">                            &amp;************************************&amp;</span>\n<span class=\"go\">                                  &amp;*******************************&amp;</span>\n<span class=\"go\">                                    &amp;*****************************&amp;</span>\n<span class=\"go\">  _____________</span>\n<span class=\"go\">| Hi! I am milk |</span>\n<span class=\"go\">  =============</span>\n<span class=\"go\">             \\</span>\n<span class=\"go\">              \\</span>\n<span class=\"go\">               \\</span>\n<span class=\"go\">                \\</span>\n<span class=\"go\">                    ____________</span>\n<span class=\"go\">                    |__________|</span>\n<span class=\"go\">                   /           /\\</span>\n<span class=\"go\">                  /           /  \\</span>\n<span class=\"go\">                 /___________/___/|</span>\n<span class=\"go\">                 |          |     |</span>\n<span class=\"go\">                 |  ==\\ /== |     |</span>\n<span class=\"go\">                 |   O   O  | \\ \\ |</span>\n<span class=\"go\">                 |     &lt;    |  \\ \\|</span>\n<span class=\"go\">                /|          |   \\ \\</span>\n<span class=\"go\">               / |  \\_____/ |   / /</span>\n<span class=\"go\">              / /|          |  / /|</span>\n<span class=\"go\">             /||\\|          | /||\\/</span>\n<span class=\"go\">                 -------------|</span>\n<span class=\"go\">                     | |    | |</span>\n<span class=\"go\">                    &lt;__/    \\__&gt;</span>\n<span class=\"go\">  ____________</span>\n<span class=\"go\">| Hi! I am pig |</span>\n<span class=\"go\">  ============</span>\n<span class=\"go\">            \\</span>\n<span class=\"go\">             \\</span>\n<span class=\"go\">              \\</span>\n<span class=\"go\">               \\</span>\n<span class=\"go\">                         ,.</span>\n<span class=\"go\">                        (_|,.</span>\n<span class=\"go\">                        ,&#39; /, )_______   _</span>\n<span class=\"go\">                    __j o``-&#39;        `.&#39;-)&#39;</span>\n<span class=\"go\">                    (&quot;)                 \\&#39;</span>\n<span class=\"go\">                    `-j                |</span>\n<span class=\"go\">                      `-._(           /</span>\n<span class=\"go\">                         |_\\  |--^.  /</span>\n<span class=\"go\">                        /_]&#39;|_| /_)_/</span>\n<span class=\"go\">                            /_]&#39;  /_]&#39;</span>\n<span class=\"go\">  ____________________</span>\n<span class=\"go\">| Hi! I am stegosaurus |</span>\n<span class=\"go\">  ====================</span>\n<span class=\"go\">                          \\</span>\n<span class=\"go\">                           \\</span>\n<span class=\"go\">                            \\</span>\n<span class=\"go\">                             \\</span>\n<span class=\"go\">                                                .       .</span>\n<span class=\"go\">                                               / `.   .&#39; \\</span>\n<span class=\"go\">                                       .---.  &lt;    &gt; &lt;    &gt;  .---.</span>\n<span class=\"go\">                                       |    \\  \\ - ~ ~ - /  /    |</span>\n<span class=\"go\">                           _____        ~-..-~             ~-..-~</span>\n<span class=\"go\">                          |     |   \\~~~\\.&#39;                    `./~~~/</span>\n<span class=\"go\">                         ---------   \\__/                        \\__/</span>\n<span class=\"go\">                        .&#39;  O    \\     /               /       \\  &quot;</span>\n<span class=\"go\">                       (_____,    `._.&#39;               |         }  \\/~~~/</span>\n<span class=\"go\">                        `----.          /       }     |        /    \\__/</span>\n<span class=\"go\">                              `-.      |       /      |       /      `. ,~~|</span>\n<span class=\"go\">                                  ~-.__|      /_ - ~ ^|      /- _      `..-&#39;   f:  f:</span>\n<span class=\"go\">                                       |     /        |     /     ~-.     `-. _|| _||_</span>\n<span class=\"go\">                                       |_____|        |_____|         ~ - . _ _ _ _ __&gt;</span>\n<span class=\"go\">  _______________</span>\n<span class=\"go\">| Hi! I am stimpy |</span>\n<span class=\"go\">  ===============</span>\n<span class=\"go\">                \\</span>\n<span class=\"go\">                 \\</span>\n<span class=\"go\">                  \\</span>\n<span class=\"go\">                   \\</span>\n<span class=\"go\">                       .    _  .</span>\n<span class=\"go\">                      |\\_|/__/|</span>\n<span class=\"go\">                      / / \\/ \\  \\</span>\n<span class=\"go\">                     /__|O||O|__ \\</span>\n<span class=\"go\">                    |/_ \\_/\\_/ _\\ |</span>\n<span class=\"go\">                    | | (____) | ||</span>\n<span class=\"go\">                    \\/\\___/\\__/  //</span>\n<span class=\"go\">                    (_/         ||</span>\n<span class=\"go\">                     |          ||</span>\n<span class=\"go\">                     |          ||\\</span>\n<span class=\"go\">                      \\        //_/</span>\n<span class=\"go\">                       \\______//</span>\n<span class=\"go\">                      __ || __||</span>\n<span class=\"go\">                     (____(____)</span>\n<span class=\"go\">  _____________</span>\n<span class=\"go\">| Hi! I am trex |</span>\n<span class=\"go\">  =============</span>\n<span class=\"go\">                    \\</span>\n<span class=\"go\">                     \\</span>\n<span class=\"go\">                      \\</span>\n<span class=\"go\">                       \\</span>\n<span class=\"go\">                          .-=-==--==--.</span>\n<span class=\"go\">                    ..-==&quot;  ,&#39;o`)      `.</span>\n<span class=\"go\">                  ,&#39;         `&quot;&#39;         \\</span>\n<span class=\"go\">                 :  (                     `.__...._</span>\n<span class=\"go\">                 |                  )    /         `-=-.</span>\n<span class=\"go\">                 :       ,vv.-._   /    /               `---==-._</span>\n<span class=\"go\">                  \\/\\/\\/VV ^ d88`;&#39;    /                         `.</span>\n<span class=\"go\">                      ``  ^/d88P!&#39;    /             ,              `._</span>\n<span class=\"go\">                         ^/    !&#39;   ,.      ,      /                  &quot;-,,__,,--&#39;&quot;&quot;&quot;&quot;-.</span>\n<span class=\"go\">                        ^/    !&#39;  ,&#39;  \\ . .(      (         _           )  ) ) ) ))_,-.\\</span>\n<span class=\"go\">                       ^(__ ,!&#39;,&quot;&#39;   ;:+.:%:a.     \\:.. . ,&#39;          )  )  ) ) ,&quot;&#39;    &#39;</span>\n<span class=\"go\">                       &#39;,,,&#39;&#39;,&#39;     /o:::&quot;:%:%a.    \\:.:.:         .    )  ) _,&#39;</span>\n<span class=\"go\">                        &quot;&quot;&quot;&#39;       ;&#39;:::&#39;&#39; `+%%%a._  \\%:%|         ;.). _,-&quot;&quot;</span>\n<span class=\"go\">                               ,-=&#39;_.-&#39;      ``:%::)  )%:|        /:._,&quot;</span>\n<span class=\"go\">                              (/(/&quot;           ,&quot; ,&#39;_,&#39;%%%:       (_,&#39;</span>\n<span class=\"go\">                                             (  (//(`.___;        \\</span>\n<span class=\"go\">                                              \\     \\    `         `</span>\n<span class=\"go\">                                               `.    `.   `.        :</span>\n<span class=\"go\">                                                 \\. . .\\    : . . . :</span>\n<span class=\"go\">                                                  \\. . .:    `.. . .:</span>\n<span class=\"go\">                                                   `..:.:\\     \\:...\\</span>\n<span class=\"go\">                                                    ;:.:.;      ::...:</span>\n<span class=\"go\">                                                    ):%::       :::::;</span>\n<span class=\"go\">                                                __,::%:(        :::::</span>\n<span class=\"go\">                                             ,;:%%%%%%%:        ;:%::</span>\n<span class=\"go\">                                               ;,--&quot;&quot;-.`\\  ,=--&#39;:%:%:\\</span>\n<span class=\"go\">                                              /&quot;       &quot;| /-&quot;.:%%%%%%%\\</span>\n<span class=\"go\">                                                              ;,-&quot;&#39;`)%%)</span>\n<span class=\"go\">                                                             /&quot;      &quot;|</span>\n<span class=\"go\">  _______________</span>\n<span class=\"go\">| Hi! I am turkey |</span>\n<span class=\"go\">  ===============</span>\n<span class=\"go\">                       \\</span>\n<span class=\"go\">                        \\</span>\n<span class=\"go\">                         \\</span>\n<span class=\"go\">                          \\</span>\n<span class=\"go\">                                                            ,+*^^*+___+++_</span>\n<span class=\"go\">                                                      ,*^^^^              )</span>\n<span class=\"go\">                                                   _+*                     ^**+_</span>\n<span class=\"go\">                                                 +^       _ _++*+_+++_,         )</span>\n<span class=\"go\">                             _+^^*+_    (     ,+*^ ^          \\\\+_        )</span>\n<span class=\"go\">                            {       )  (    ,(    ,_+--+--,      ^)      ^\\\\</span>\n<span class=\"go\">                           { (\\@)    } f   ,(  ,+-^ __*_*_  ^^\\\\_   ^\\\\       )</span>\n<span class=\"go\">                          {:;-/    (_+*-+^^^^^+*+*&lt;_ _++_)_    )    )      /</span>\n<span class=\"go\">                         ( /  (    (        ,___    ^*+_+* )   &lt;    &lt;      \\\\</span>\n<span class=\"go\">                          U _/     )    *--&lt;  ) ^\\\\-----++__)   )    )       )</span>\n<span class=\"go\">                           (      )  _(^)^^))  )  )\\\\^^^^^))^*+/    /       /</span>\n<span class=\"go\">                         (      /  (_))_^)) )  )  ))^^^^^))^^^)__/     +^^</span>\n<span class=\"go\">                        (     ,/    (^))^))  )  ) ))^^^^^^^))^^)       _)</span>\n<span class=\"go\">                         *+__+*       (_))^)  ) ) ))^^^^^^))^^^^^)____*^</span>\n<span class=\"go\">                         \\\\             \\\\_)^)_)) ))^^^^^^^^^^))^^^^)</span>\n<span class=\"go\">                          (_             ^\\\\__^^^^^^^^^^^^))^^^^^^^)</span>\n<span class=\"go\">                            ^\\\\___            ^\\\\__^^^^^^))^^^^^^^^)\\\\\\\\</span>\n<span class=\"go\">                                 ^^^^^\\\\uuu/^^\\\\uuu/^^^^\\\\^\\\\^\\\\^\\\\^\\\\^\\\\^\\\\^\\\\</span>\n<span class=\"go\">                                    ___) &gt;____) &gt;___   ^\\\\_\\\\_\\\\_\\\\_\\\\_\\\\_\\\\)</span>\n<span class=\"go\">                                   ^^^//\\\\\\\\_^^//\\\\\\\\_^       ^(\\\\_\\\\_\\\\_\\\\)</span>\n<span class=\"go\">                                    ^^^ ^^ ^^^ ^</span>\n<span class=\"go\">  _______________</span>\n<span class=\"go\">| Hi! I am turtle |</span>\n<span class=\"go\">  ===============</span>\n<span class=\"go\">                 \\</span>\n<span class=\"go\">                  \\</span>\n<span class=\"go\">                   \\</span>\n<span class=\"go\">                    \\</span>\n<span class=\"go\">                                               ___-------___</span>\n<span class=\"go\">                                           _-~~             ~~-_</span>\n<span class=\"go\">                                        _-~                    /~-_</span>\n<span class=\"go\">                      /^\\__/^\\         /~  \\                   /    \\</span>\n<span class=\"go\">                    /|  O|| O|        /      \\_______________/        \\</span>\n<span class=\"go\">                   | |___||__|      /       /                \\          \\</span>\n<span class=\"go\">                   |          \\    /      /                    \\          \\</span>\n<span class=\"go\">                   |   (_______) /______/                        \\_________ \\</span>\n<span class=\"go\">                   |         / /         \\                      /            \\</span>\n<span class=\"go\">                    \\         \\^\\\\         \\                  /               \\     /</span>\n<span class=\"go\">                      \\         ||           \\______________/      _-_       //\\__//</span>\n<span class=\"go\">                        \\       ||------_-~~-_ ------------- \\ --/~   ~\\    || __/</span>\n<span class=\"go\">                          ~-----||====/~     |==================|       |/~~~~~</span>\n<span class=\"go\">                           (_(__/  ./     /                    \\_\\      \\.</span>\n<span class=\"go\">                                  (_(___/                         \\_____)_)</span>\n<span class=\"go\">  ____________</span>\n<span class=\"go\">| Hi! I am tux |</span>\n<span class=\"go\">  ============</span>\n<span class=\"go\">                 \\</span>\n<span class=\"go\">                  \\</span>\n<span class=\"go\">                   \\</span>\n<span class=\"go\">                    .--.</span>\n<span class=\"go\">                   |o_o |</span>\n<span class=\"go\">                   |:_/ |</span>\n<span class=\"go\">                  //   \\ \\</span>\n<span class=\"go\">                 (|     | )</span>\n<span class=\"go\">                /&#39;\\_   _/`\\</span>\n<span class=\"go\">                \\___)=(___/</span>\n</code></pre></div>\n\n<h1 id=\"command-line-usage\">Command Line Usage</h1>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">$ </span>cowsay Hello World\n<span class=\"go\">  ___________</span>\n<span class=\"go\">| Hello World |</span>\n<span class=\"go\">  ===========</span>\n<span class=\"go\">           \\</span>\n<span class=\"go\">            \\</span>\n<span class=\"go\">              ^__^</span>\n<span class=\"go\">              (oo)\\_______</span>\n<span class=\"go\">              (__)\\       )\\/\\</span>\n<span class=\"go\">                  ||----w |</span>\n<span class=\"go\">                  ||     ||</span>\n\n\n<span class=\"gp\">$ </span>cowsay --character pig Hello World\n<span class=\"go\">  ___________</span>\n<span class=\"go\">| Hello World |</span>\n<span class=\"go\">  ===========</span>\n<span class=\"go\">           \\</span>\n<span class=\"go\">            \\</span>\n<span class=\"go\">             \\</span>\n<span class=\"go\">              \\</span>\n<span class=\"go\">                        ,.</span>\n<span class=\"go\">                       (_|,.</span>\n<span class=\"go\">                       ,&#39; /, )_______   _</span>\n<span class=\"go\">                   __j o``-&#39;        `.&#39;-)&#39;</span>\n<span class=\"go\">                   (&quot;)                 \\&#39;</span>\n<span class=\"go\">                   `-j                |</span>\n<span class=\"go\">                       `-._(           /</span>\n<span class=\"go\">                           |_\\  |--^.  /</span>\n<span class=\"go\">                       /_]&#39;|_| /_)_/</span>\n<span class=\"go\">                           /_]&#39;  /_]&#39;</span>\n\n\n<span class=\"gp\">$ </span>cowsay Hello World --character tux\n<span class=\"go\">  ___________</span>\n<span class=\"go\">| Hello World |</span>\n<span class=\"go\">  ===========</span>\n<span class=\"go\">                \\</span>\n<span class=\"go\">                 \\</span>\n<span class=\"go\">                  \\</span>\n<span class=\"go\">                   .--.</span>\n<span class=\"go\">                  |o_o |</span>\n<span class=\"go\">                  |:_/ |</span>\n<span class=\"go\">                 //   \\ \\</span>\n<span class=\"go\">                (|     | )</span>\n<span class=\"go\">               /&#39;\\_   _/`\\</span>\n<span class=\"go\">               \\___)=(___/</span>\n</code></pre></div>\n\n<h1 id=\"change-log\">Change Log</h1>\n\n<p>All notable changes to this project will be documented in this file</p>\n\n<hr />\n\n<h2 id=\"v50-jun-21-2022\">v5.0 (Jun 21, 2022)</h2>\n\n<h2 id=\"added\">Added</h2>\n\n<ul>\n<li>New command line argument \"--character\" to optionally select character on the CLI (Added\nby <a href=\"https://github.com/juftin\">Justin Flannery</a>)</li>\n<li>Github Workflow for automated testing (Added by <a href=\"https://github.com/scotthaleen\">Scott Haleen</a>)</li>\n<li><b>New character</b>: Fox (Added by <a href=\"https://github.com/scotthaleen\">Scott Haleen</a>)</li>\n<li><b>New character</b>: Miki (Added by <a href=\"https://github.com/stefan-matic\">Stefan Mati\u0107</a>)</li>\n</ul>\n\n<h2 id=\"changed\">Changed</h2>\n\n<ul>\n<li>Bug fixes in test cases (Added by <a href=\"https://github.com/marcusesa\">Marcus S\u00e1</a>)</li>\n</ul>\n\n<hr />\n\n<h2 id=\"v40-apr-19-2021\">v4.0 (Apr 19, 2021)</h2>\n\n<h2 id=\"added-2\">Added</h2>\n\n<ul>\n<li>New function get_output_string() to get console output as string <br></li>\n<li><b>New character</b>: Trex (Added by <a href=\"https://github.com/oscar-defelice\">Oscar de Felice</a>)</li>\n</ul>\n\n<h2 id=\"changed-2\">Changed</h2>\n\n<ul>\n<li>Code optimizations and test cases (Added by <a href=\"https://github.com/sparrow242\">sparrow242</a>)</li>\n<li>cowsay.chars from list to dict</li>\n</ul>\n\n<hr />\n\n<h2 id=\"v30-dec-08-2020\">v3.0 (Dec 08, 2020)</h2>\n\n<h2 id=\"added-3\">Added</h2>\n\n<ul>\n<li><b>New character</b>: Pig (Added by <a href=\"https://github.com/gsornsen\">Gerald Sornsen</a>)<br></li>\n<li>Command line compatability (Added by <a href=\"https://github.com/cs01\">Chad Smith</a>)</li>\n</ul>\n\n<hr />\n\n<h2 id=\"v10-may-08-2017\">v1.0 (May 08, 2017)</h2>\n\n<ul>\n<li>Initial release with 14 characters</li>\n</ul>\n"}, {"fullname": "cowsay.characters", "modulename": "cowsay.characters", "type": "module", "doc": "<p></p>\n"}, {"fullname": "cowsay.main", "modulename": "cowsay.main", "type": "module", "doc": "<p></p>\n"}, {"fullname": "cowsay.main.wrap_lines", "modulename": "cowsay.main", "qualname": "wrap_lines", "type": "function", "doc": "<p></p>\n", "signature": "(lines, max_width=49)", "funcdef": "def"}, {"fullname": "cowsay.main.generate_bubble", "modulename": "cowsay.main", "qualname": "generate_bubble", "type": "function", "doc": "<p></p>\n", "signature": "(text)", "funcdef": "def"}, {"fullname": "cowsay.main.generate_char", "modulename": "cowsay.main", "qualname": "generate_char", "type": "function", "doc": "<p></p>\n", "signature": "(char, text_width)", "funcdef": "def"}, {"fullname": "cowsay.main.draw", "modulename": "cowsay.main", "qualname": "draw", "type": "function", "doc": "<p></p>\n", "signature": "(char, text, to_console=True)", "funcdef": "def"}, {"fullname": "cowsay.main.get_output_string", "modulename": "cowsay.main", "qualname": "get_output_string", "type": "function", "doc": "<p></p>\n", "signature": "(char_name, text)", "funcdef": "def"}, {"fullname": "cowsay.main.cli", "modulename": "cowsay.main", "qualname": "cli", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "cowsay.main.func", "modulename": "cowsay.main", "qualname": "func", "type": "function", "doc": "<p></p>\n", "signature": "(\n    text,\n    char_lines=\"\\n     \\\\\\n      \\\\\\n       \\\\\\n        .--.\\n       |o_o |\\n       |:_/ |\\n      //   \\\\ \\\\\\n     (|     | )\\n    /'\\\\_   _/`\\\\\\n    \\\\___)=(___/\\n\"\n)", "funcdef": "def"}, {"fullname": "cowsay.main.beavis", "modulename": "cowsay.main", "qualname": "beavis", "type": "function", "doc": "<p></p>\n", "signature": "(\n    text,\n    char_lines=\"\\n     \\\\\\n      \\\\\\n       \\\\\\n             _------~~-,\\n          ,'            ,\\n          /               \\\\\\\\\\n         /                :\\n        |                  '\\n        |                  |\\n        |                  |\\n         |   _--           |\\n         _| =-.     .-.   ||\\n         o|/o/       _.   |\\n         /  ~          \\\\\\\\ |\\n       (____\\\\@)  ___~    |\\n          |_===~~~.`    |\\n       _______.--~     |\\n       \\\\\\\\________       |\\n                \\\\\\\\      |\\n              __/-___-- -__\\n             /            _ \\\\\\\\\\n\\n\"\n)", "funcdef": "def"}, {"fullname": "cowsay.main.cheese", "modulename": "cowsay.main", "qualname": "cheese", "type": "function", "doc": "<p></p>\n", "signature": "(\n    text,\n    char_lines='\\n\\\\\\n \\\\\\n  \\\\\\n   \\\\\\n     /     \\\\_/         |\\n    |                 ||\\n    |                 ||\\n   |    ###\\\\  /###   | |\\n   |     0  \\\\/  0    | |\\n  /|                 | |\\n / |        <        |\\\\ \\\\\\n| /|                 | | |\\n| |     \\\\_______/   |  | |\\n| |                 | / /\\n/||                 /|||\\n   ----------------|\\n        | |    | |\\n        ***    ***\\n       /___\\\\  /___\\\\\\n'\n)", "funcdef": "def"}, {"fullname": "cowsay.main.daemon", "modulename": "cowsay.main", "qualname": "daemon", "type": "function", "doc": "<p></p>\n", "signature": "(\n    text,\n    char_lines=\"\\n        \\\\\\n         \\\\\\n          \\\\\\n           \\\\\\n            /- _  `-/  '\\n           (/\\\\/ \\\\ \\\\   /\\\\\\n           / /   | `    \\\\\\n           O O   ) /    |\\n           `-^--'`<     '\\n          (_.)  _  )   /\\n           `.___/`    /\\n             `-----' /\\n<----.     __ / __   \\\\\\n<----|====O)))==) \\\\) /====\\n<----'    `--' `.__,' \\\\\\n             |        |\\n              \\\\       /\\n        ______( (_  / \\\\______\\n      ,'  ,-----'   |        \\\\\\n      `--{__________)        \\\\/\\n\"\n)", "funcdef": "def"}, {"fullname": "cowsay.main.cow", "modulename": "cowsay.main", "qualname": "cow", "type": "function", "doc": "<p></p>\n", "signature": "(\n    text,\n    char_lines='\\n\\\\\\n \\\\\\n   ^__^\\n   (oo)\\\\_______\\n   (__)\\\\       )\\\\/\\\\\\n       ||----w |\\n       ||     ||\\n'\n)", "funcdef": "def"}, {"fullname": "cowsay.main.dragon", "modulename": "cowsay.main", "qualname": "dragon", "type": "function", "doc": "<p></p>\n", "signature": "(\n    text,\n    char_lines=\"\\n  \\\\\\n   \\\\\\n    \\\\\\n     \\\\\\n                           / \\\\\\\\  //\\\\\\\\\\n            |\\\\\\\\___/|      /   \\\\\\\\//  \\\\\\\\\\\\\\\\\\n            /0  0  \\\\\\\\__  /    //  | \\\\\\\\ \\\\\\\\\\n           /     /  \\\\\\\\/_/    //   |  \\\\\\\\  \\\\\\\\\\n           \\\\@_^_\\\\@'/   \\\\\\\\/_   //    |   \\\\\\\\   \\\\\\\\\\n           //_^_/     \\\\\\\\/_ //     |    \\\\\\\\    \\\\\\\\\\n        ( //) |        \\\\\\\\///      |     \\\\\\\\     \\\\\\\\\\n      ( / /) _|_ /   )  //       |      \\\\\\\\     _\\\\\\\\\\n    ( // /) '/,_ _ _/  ( ; -.    |    _ _\\\\\\\\.-~        .-~~~^-.\\n  (( / / )) ,-{        _      `-.|.-~-.           .~         `.\\n (( // / ))  '/\\\\\\\\      /                 ~-. _ .-~      .-~^-.  \\\\\\\\\\n (( /// ))      `.   {            }                   /      \\\\\\\\  \\\\\\\\\\n  (( / ))     .----~-.\\\\\\\\        \\\\\\\\-'                 .~         \\\\\\\\  `. \\\\\\\\^-.\\n             ///.----..>        \\\\\\\\             _ -~             `.  ^-`  ^-_\\n               ///-._ _ _ _ _ _ _}^ - - - - ~                     ~-- ,.-~\\n                                                                  /.-~\\n\"\n)", "funcdef": "def"}, {"fullname": "cowsay.main.fox", "modulename": "cowsay.main", "qualname": "fox", "type": "function", "doc": "<p></p>\n", "signature": "(\n    text,\n    char_lines='\\n \\\\\\n  \\\\\\n   \\\\\\n    |\\\\_/|,,_____,~~`\\n    (.\".)~~     )`~}}\\n     \\\\o/\\\\ /---~\\\\\\\\ ~}}\\n       _//    _// ~}\\n'\n)", "funcdef": "def"}, {"fullname": "cowsay.main.ghostbusters", "modulename": "cowsay.main", "qualname": "ghostbusters", "type": "function", "doc": "<p></p>\n", "signature": "(\n    text,\n    char_lines='\\n        \\\\\\n         \\\\\\n          \\\\\\n           \\\\\\n                       __---__\\n                    _-       /--______\\n               __--( /     \\\\ )XXXXXXXXXXX\\\\v.\\n             .-XXX(   O   O  )XXXXXXXXXXXXXXX-\\n            /XXX(       U     )        XXXXXXX\\\\\\n          /XXXXX(              )--_  XXXXXXXXXXX\\\\\\n         /XXXXX/ (      O     )   XXXXXX   \\\\XXXXX\\\\\\n         XXXXX/   /            XXXXXX   \\\\__ \\\\XXXXX\\n         XXXXXX__/          XXXXXX         \\\\__---->\\n ---___  XXX__/          XXXXXX      \\\\__         /\\n   \\\\-  --__/   ___/\\\\  XXXXXX            /  ___--/=\\n    \\\\-\\\\    ___/    XXXXXX              \\'--- XXXXXX\\n       \\\\-\\\\/XXX\\\\ XXXXXX                      /XXXXX\\n         \\\\XXXXXXXXX   \\\\                    /XXXXX/\\n          \\\\XXXXXX      >                 _/XXXXX/\\n            \\\\XXXXX--__/              __-- XXXX/\\n             -XXXXXXXX---------------  XXXXXX-\\n                \\\\XXXXXXXXXXXXXXXXXXXXXXXXXX/\\n                  \"\"VXXXXXXXXXXXXXXXXXXV\"\"\\n'\n)", "funcdef": "def"}, {"fullname": "cowsay.main.kitty", "modulename": "cowsay.main", "qualname": "kitty", "type": "function", "doc": "<p></p>\n", "signature": "(\n    text,\n    char_lines='\\n   \\\\\\n    \\\\\\n     \\\\\\n      \\\\\\n\\n       (\"`-\\'  \\'-/\") .___..--\\' \\' \"`-._\\n        ` *_ *  )    `-.   (      ) .`-.__. `)\\n         (_Y_.) \\' ._   )   `._` ;  `` -. .-\\'\\n      _.. `--\\'_..-_/   /--\\' _ .\\' ,4\\n     ( i l ),-\\'\\'  ( l i),\\'  ( ( ! .-\\'\\n'\n)", "funcdef": "def"}, {"fullname": "cowsay.main.meow", "modulename": "cowsay.main", "qualname": "meow", "type": "function", "doc": "<p></p>\n", "signature": "(\n    text,\n    char_lines='\\n\\\\\\n \\\\\\n  \\\\\\n   \\\\\\n                  _ ___.--\\'\\'\\'`--\\'\\'//-,-_--_.\\n      \\\\\\\\`\"\\' ` || \\\\\\\\\\\\\\\\ \\\\\\\\ \\\\\\\\\\\\\\\\/ / // / ,-\\\\\\\\\\\\\\\\`,_\\n     /\\'`  \\\\\\\\ \\\\\\\\ || Y  | \\\\\\\\|/ / // / - |__ `-,\\n    /\\\\@\"\\\\\\\\  ` \\\\\\\\ `\\\\\\\\ |  | ||/ // | \\\\\\\\/  \\\\\\\\  `-._`-,_.,\\n   /  _.-. `.-\\\\\\\\,___/\\\\\\\\ _/|_/_\\\\\\\\_\\\\\\\\/|_/ |     `-._._)\\n   `-\\'``/  /  |  // \\\\\\\\__/\\\\\\\\__  /  \\\\\\\\__/ \\\\\\\\\\n        `-\\'  /-\\\\\\\\/  | -|   \\\\\\\\__ \\\\\\\\   |-\\' |\\n          __/\\\\\\\\ / _/ \\\\\\\\/ __,-\\'   ) ,\\' _|\\'\\n         (((__/(((_.\\' ((___..-\\'((__,\\'\\n'\n)", "funcdef": "def"}, {"fullname": "cowsay.main.miki", "modulename": "cowsay.main", "qualname": "miki", "type": "function", "doc": "<p></p>\n", "signature": "(\n    text,\n    char_lines='\\n\\\\                                                      \\n \\\\                  &************************&\\n  \\\\             &******************************&\\n   \\\\          &**********************************&\\n            &**************************************&\\n          &*****************************************&\\n         &*******************************************& \\n        &*********************************************&\\n       &***********************************************&\\n      &************************************************&\\n      &***#########********#########*******************&\\n      &*##       ##########          ##################&\\n      &*##   O   ##@**####   O       ##***************&\\n      &***#########@*******#########*****************&\\n      &***********@*********************************&\\n      &**********@*********************************&\\n      &*********@*********************************&\\n      &********@@*********************************&\\n       &*******@@@@@@****************************&   \\n        &**************************************&\\n          &**************************************&\\n           &******@@@@@@@@@@@@*********************&\\n             &*************************************&   \\n               &************************************&\\n                     &*******************************&\\n                       &*****************************&\\n'\n)", "funcdef": "def"}, {"fullname": "cowsay.main.milk", "modulename": "cowsay.main", "qualname": "milk", "type": "function", "doc": "<p></p>\n", "signature": "(\n    text,\n    char_lines='\\n\\\\\\n \\\\\\n  \\\\\\n   \\\\\\n       ____________\\n       |__________|\\n      /           /\\\\\\n     /           /  \\\\\\n    /___________/___/|\\n    |          |     |\\n    |  ==\\\\ /== |     |\\n    |   O   O  | \\\\ \\\\ |\\n    |     <    |  \\\\ \\\\|\\n   /|          |   \\\\ \\\\\\n  / |  \\\\_____/ |   / /\\n / /|          |  / /|\\n/||\\\\|          | /||\\\\/\\n    -------------|\\n        | |    | |\\n       <__/    \\\\__>\\n'\n)", "funcdef": "def"}, {"fullname": "cowsay.main.pig", "modulename": "cowsay.main", "qualname": "pig", "type": "function", "doc": "<p></p>\n", "signature": "(\n    text,\n    char_lines='\\n\\\\\\n \\\\\\n  \\\\\\n   \\\\\\n             ,.\\n            (_|,.\\n            ,\\' /, )_______   _\\n        __j o``-\\'        `.\\'-)\\'\\n        (\")                 \\\\\\'\\n        `-j                |\\n          `-._(           /\\n             |_\\\\  |--^.  /\\n            /_]\\'|_| /_)_/\\n                /_]\\'  /_]\\'\\n'\n)", "funcdef": "def"}, {"fullname": "cowsay.main.stegosaurus", "modulename": "cowsay.main", "qualname": "stegosaurus", "type": "function", "doc": "<p></p>\n", "signature": "(\n    text,\n    char_lines='\\n      \\\\\\n       \\\\\\n        \\\\\\n         \\\\\\n                            .       .\\n                           / `.   .\\' \\\\\\n                   .---.  <    > <    >  .---.\\n                   |    \\\\  \\\\ - ~ ~ - /  /    |\\n       _____        ~-..-~             ~-..-~\\n      |     |   \\\\~~~\\\\.\\'                    `./~~~/\\n     ---------   \\\\__/                        \\\\__/\\n    .\\'  O    \\\\     /               /       \\\\  \"\\n   (_____,    `._.\\'               |         }  \\\\/~~~/\\n    `----.          /       }     |        /    \\\\__/\\n          `-.      |       /      |       /      `. ,~~|\\n              ~-.__|      /_ - ~ ^|      /- _      `..-\\'   f:  f:\\n                   |     /        |     /     ~-.     `-. _|| _||_\\n                   |_____|        |_____|         ~ - . _ _ _ _ __>\\n\\n'\n)", "funcdef": "def"}, {"fullname": "cowsay.main.stimpy", "modulename": "cowsay.main", "qualname": "stimpy", "type": "function", "doc": "<p></p>\n", "signature": "(\n    text,\n    char_lines='\\n \\\\\\n  \\\\\\n   \\\\\\n    \\\\\\n        .    _  .\\n       |\\\\_|/__/|\\n       / / \\\\/ \\\\  \\\\\\n      /__|O||O|__ \\\\\\n     |/_ \\\\_/\\\\_/ _\\\\ |\\n     | | (____) | ||\\n     \\\\/\\\\___/\\\\__/  //\\n     (_/         ||\\n      |          ||\\n      |          ||\\\\\\n       \\\\        //_/\\n        \\\\______//\\n       __ || __||\\n      (____(____)\\n'\n)", "funcdef": "def"}, {"fullname": "cowsay.main.trex", "modulename": "cowsay.main", "qualname": "trex", "type": "function", "doc": "<p></p>\n", "signature": "(\n    text,\n    char_lines='\\n       \\\\\\n        \\\\\\n         \\\\\\n          \\\\\\n             .-=-==--==--.\\n       ..-==\"  ,\\'o`)      `.\\n     ,\\'         `\"\\'         \\\\\\n    :  (                     `.__...._\\n    |                  )    /         `-=-.\\n    :       ,vv.-._   /    /               `---==-._\\n     \\\\/\\\\/\\\\/VV ^ d88`;\\'    /                         `.\\n         ``  ^/d88P!\\'    /             ,              `._\\n            ^/    !\\'   ,.      ,      /                  \"-,,__,,--\\'\"\"\"\"-.\\n           ^/    !\\'  ,\\'  \\\\ . .(      (         _           )  ) ) ) ))_,-.\\\\\\n          ^(__ ,!\\',\"\\'   ;:+.:%:a.     \\\\:.. . ,\\'          )  )  ) ) ,\"\\'    \\'\\n          \\',,,\\'\\',\\'     /o:::\":%:%a.    \\\\:.:.:         .    )  ) _,\\'\\n           \"\"\"\\'       ;\\':::\\'\\' `+%%%a._  \\\\%:%|         ;.). _,-\"\"\\n                  ,-=\\'_.-\\'      ``:%::)  )%:|        /:._,\"\\n                 (/(/\"           ,\" ,\\'_,\\'%%%:       (_,\\'\\n                                (  (//(`.___;        \\\\\\n                                 \\\\     \\\\    `         `\\n                                  `.    `.   `.        :\\n                                    \\\\. . .\\\\    : . . . :\\n                                     \\\\. . .:    `.. . .:\\n                                      `..:.:\\\\     \\\\:...\\\\\\n                                       ;:.:.;      ::...:\\n                                       ):%::       :::::;\\n                                   __,::%:(        :::::\\n                                ,;:%%%%%%%:        ;:%::\\n                                  ;,--\"\"-.`\\\\  ,=--\\':%:%:\\\\\\n                                 /\"       \"| /-\".:%%%%%%%\\\\\\n                                                 ;,-\"\\'`)%%)\\n                                                /\"      \"|\\n'\n)", "funcdef": "def"}, {"fullname": "cowsay.main.turkey", "modulename": "cowsay.main", "qualname": "turkey", "type": "function", "doc": "<p></p>\n", "signature": "(\n    text,\n    char_lines='\\n        \\\\\\n         \\\\\\n          \\\\\\n           \\\\\\n                                             ,+*^^*+___+++_\\n                                       ,*^^^^              )\\n                                    _+*                     ^**+_\\n                                  +^       _ _++*+_+++_,         )\\n              _+^^*+_    (     ,+*^ ^          \\\\\\\\+_        )\\n             {       )  (    ,(    ,_+--+--,      ^)      ^\\\\\\\\\\n            { (\\\\@)    } f   ,(  ,+-^ __*_*_  ^^\\\\\\\\_   ^\\\\\\\\       )\\n           {:;-/    (_+*-+^^^^^+*+*<_ _++_)_    )    )      /\\n          ( /  (    (        ,___    ^*+_+* )   <    <      \\\\\\\\\\n           U _/     )    *--<  ) ^\\\\\\\\-----++__)   )    )       )\\n            (      )  _(^)^^))  )  )\\\\\\\\^^^^^))^*+/    /       /\\n          (      /  (_))_^)) )  )  ))^^^^^))^^^)__/     +^^\\n         (     ,/    (^))^))  )  ) ))^^^^^^^))^^)       _)\\n          *+__+*       (_))^)  ) ) ))^^^^^^))^^^^^)____*^\\n          \\\\\\\\             \\\\\\\\_)^)_)) ))^^^^^^^^^^))^^^^)\\n           (_             ^\\\\\\\\__^^^^^^^^^^^^))^^^^^^^)\\n             ^\\\\\\\\___            ^\\\\\\\\__^^^^^^))^^^^^^^^)\\\\\\\\\\\\\\\\\\n                  ^^^^^\\\\\\\\uuu/^^\\\\\\\\uuu/^^^^\\\\\\\\^\\\\\\\\^\\\\\\\\^\\\\\\\\^\\\\\\\\^\\\\\\\\^\\\\\\\\^\\\\\\\\\\n                     ___) >____) >___   ^\\\\\\\\_\\\\\\\\_\\\\\\\\_\\\\\\\\_\\\\\\\\_\\\\\\\\_\\\\\\\\)\\n                    ^^^//\\\\\\\\\\\\\\\\_^^//\\\\\\\\\\\\\\\\_^       ^(\\\\\\\\_\\\\\\\\_\\\\\\\\_\\\\\\\\)\\n                     ^^^ ^^ ^^^ ^\\n'\n)", "funcdef": "def"}, {"fullname": "cowsay.main.turtle", "modulename": "cowsay.main", "qualname": "turtle", "type": "function", "doc": "<p></p>\n", "signature": "(\n    text,\n    char_lines='\\n  \\\\\\n   \\\\\\n    \\\\\\n     \\\\\\n                                ___-------___\\n                            _-~~             ~~-_\\n                         _-~                    /~-_\\n       /^\\\\__/^\\\\         /~  \\\\                   /    \\\\\\n     /|  O|| O|        /      \\\\_______________/        \\\\\\n    | |___||__|      /       /                \\\\          \\\\\\n    |          \\\\    /      /                    \\\\          \\\\\\n    |   (_______) /______/                        \\\\_________ \\\\\\n    |         / /         \\\\                      /            \\\\\\n     \\\\         \\\\^\\\\\\\\         \\\\                  /               \\\\     /\\n       \\\\         ||           \\\\______________/      _-_       //\\\\__//\\n         \\\\       ||------_-~~-_ ------------- \\\\ --/~   ~\\\\    || __/\\n           ~-----||====/~     |==================|       |/~~~~~\\n            (_(__/  ./     /                    \\\\_\\\\      \\\\.\\n                   (_(___/                         \\\\_____)_)\\n'\n)", "funcdef": "def"}, {"fullname": "cowsay.main.tux", "modulename": "cowsay.main", "qualname": "tux", "type": "function", "doc": "<p></p>\n", "signature": "(\n    text,\n    char_lines=\"\\n     \\\\\\n      \\\\\\n       \\\\\\n        .--.\\n       |o_o |\\n       |:_/ |\\n      //   \\\\ \\\\\\n     (|     | )\\n    /'\\\\_   _/`\\\\\\n    \\\\___)=(___/\\n\"\n)", "funcdef": "def"}, {"fullname": "cowsay.test", "modulename": "cowsay.test", "type": "module", "doc": "<p></p>\n"}, {"fullname": "cowsay.test.capture_output", "modulename": "cowsay.test", "qualname": "capture_output", "type": "function", "doc": "<p></p>\n", "signature": "(function, arguments)", "funcdef": "def"}, {"fullname": "cowsay.test.delete_empty_lines", "modulename": "cowsay.test", "qualname": "delete_empty_lines", "type": "function", "doc": "<p></p>\n", "signature": "(data)", "funcdef": "def"}, {"fullname": "cowsay.test.debug_diff", "modulename": "cowsay.test", "qualname": "debug_diff", "type": "function", "doc": "<p></p>\n", "signature": "(output, solution)", "funcdef": "def"}, {"fullname": "cowsay.test.TestCowsay", "modulename": "cowsay.test", "qualname": "TestCowsay", "type": "class", "doc": "<p>Test Class for <code>cowsay</code></p>\n", "bases": "unittest.case.TestCase"}, {"fullname": "cowsay.test.TestCowsay.test_beavis", "modulename": "cowsay.test", "qualname": "TestCowsay.test_beavis", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "cowsay.test.TestCowsay.test_cheese", "modulename": "cowsay.test", "qualname": "TestCowsay.test_cheese", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "cowsay.test.TestCowsay.test_cow", "modulename": "cowsay.test", "qualname": "TestCowsay.test_cow", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "cowsay.test.TestCowsay.test_dragon", "modulename": "cowsay.test", "qualname": "TestCowsay.test_dragon", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "cowsay.test.TestCowsay.test_fox", "modulename": "cowsay.test", "qualname": "TestCowsay.test_fox", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "cowsay.test.TestCowsay.test_ghostbusters", "modulename": "cowsay.test", "qualname": "TestCowsay.test_ghostbusters", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "cowsay.test.TestCowsay.test_kitty", "modulename": "cowsay.test", "qualname": "TestCowsay.test_kitty", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "cowsay.test.TestCowsay.test_meow", "modulename": "cowsay.test", "qualname": "TestCowsay.test_meow", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "cowsay.test.TestCowsay.test_miki", "modulename": "cowsay.test", "qualname": "TestCowsay.test_miki", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "cowsay.test.TestCowsay.test_milk", "modulename": "cowsay.test", "qualname": "TestCowsay.test_milk", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "cowsay.test.TestCowsay.test_pig", "modulename": "cowsay.test", "qualname": "TestCowsay.test_pig", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "cowsay.test.TestCowsay.test_stegosaurus", "modulename": "cowsay.test", "qualname": "TestCowsay.test_stegosaurus", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "cowsay.test.TestCowsay.test_stimpy", "modulename": "cowsay.test", "qualname": "TestCowsay.test_stimpy", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "cowsay.test.TestCowsay.test_trex", "modulename": "cowsay.test", "qualname": "TestCowsay.test_trex", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "cowsay.test.TestCowsay.test_turkey", "modulename": "cowsay.test", "qualname": "TestCowsay.test_turkey", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "cowsay.test.TestCowsay.test_turtle", "modulename": "cowsay.test", "qualname": "TestCowsay.test_turtle", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "cowsay.test.TestCowsay.test_tux", "modulename": "cowsay.test", "qualname": "TestCowsay.test_tux", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();